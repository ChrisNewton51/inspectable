import { useCallback } from 'react';
import { finishTransaction as iapFinishTransaction, getAvailablePurchases as iapGetAvailablePurchases, getProducts as iapGetProducts, getPurchaseHistory, getSubscriptions as iapGetSubscriptions, requestPurchase as iapRequestPurchase, requestSubscription as iapRequestSubscription } from '../iap';
import { useIAPContext } from './withIAPContext';
export function useIAP() {
  const {
    connected,
    products,
    promotedProductsIOS,
    subscriptions,
    purchaseHistories,
    availablePurchases,
    currentPurchase,
    currentPurchaseError,
    initConnectionError,
    setProducts,
    setSubscriptions,
    setAvailablePurchases,
    setPurchaseHistories,
    setCurrentPurchase,
    setCurrentPurchaseError
  } = useIAPContext();
  const getProducts = useCallback(async skus => {
    setProducts(await iapGetProducts(skus));
  }, [setProducts]);
  const getSubscriptions = useCallback(async skus => {
    setSubscriptions(await iapGetSubscriptions(skus));
  }, [setSubscriptions]);
  const getAvailablePurchases = useCallback(async () => {
    setAvailablePurchases(await iapGetAvailablePurchases());
  }, [setAvailablePurchases]);
  const getPurchaseHistories = useCallback(async () => {
    setPurchaseHistories(await getPurchaseHistory());
  }, [setPurchaseHistories]);
  const finishTransaction = useCallback(async (purchase, isConsumable, developerPayloadAndroid) => {
    try {
      return await iapFinishTransaction(purchase, isConsumable, developerPayloadAndroid);
    } catch (err) {
      throw err;
    } finally {
      if (purchase.productId === (currentPurchase === null || currentPurchase === void 0 ? void 0 : currentPurchase.productId)) {
        setCurrentPurchase(undefined);
      }

      if (purchase.productId === (currentPurchaseError === null || currentPurchaseError === void 0 ? void 0 : currentPurchaseError.productId)) {
        setCurrentPurchaseError(undefined);
      }
    }
  }, [currentPurchase === null || currentPurchase === void 0 ? void 0 : currentPurchase.productId, currentPurchaseError === null || currentPurchaseError === void 0 ? void 0 : currentPurchaseError.productId, setCurrentPurchase, setCurrentPurchaseError]);
  return {
    connected,
    products,
    promotedProductsIOS,
    subscriptions,
    purchaseHistories,
    availablePurchases,
    currentPurchase,
    currentPurchaseError,
    initConnectionError,
    finishTransaction,
    getProducts,
    getSubscriptions,
    getAvailablePurchases,
    getPurchaseHistories,
    requestPurchase: iapRequestPurchase,
    requestSubscription: iapRequestSubscription
  };
}
//# sourceMappingURL=useIAP.js.map