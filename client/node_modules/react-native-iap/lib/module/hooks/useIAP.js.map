{"version":3,"names":["useCallback","finishTransaction","iapFinishTransaction","getAvailablePurchases","iapGetAvailablePurchases","getProducts","iapGetProducts","getPurchaseHistory","getSubscriptions","iapGetSubscriptions","requestPurchase","iapRequestPurchase","requestSubscription","iapRequestSubscription","useIAPContext","useIAP","connected","products","promotedProductsIOS","subscriptions","purchaseHistories","availablePurchases","currentPurchase","currentPurchaseError","initConnectionError","setProducts","setSubscriptions","setAvailablePurchases","setPurchaseHistories","setCurrentPurchase","setCurrentPurchaseError","skus","getPurchaseHistories","purchase","isConsumable","developerPayloadAndroid","err","productId","undefined"],"sources":["useIAP.ts"],"sourcesContent":["import {useCallback} from 'react';\n\nimport {\n  finishTransaction as iapFinishTransaction,\n  getAvailablePurchases as iapGetAvailablePurchases,\n  getProducts as iapGetProducts,\n  getPurchaseHistory,\n  getSubscriptions as iapGetSubscriptions,\n  requestPurchase as iapRequestPurchase,\n  requestSubscription as iapRequestSubscription,\n} from '../iap';\nimport type {Product, Purchase, PurchaseError, Subscription} from '../types';\n\nimport {useIAPContext} from './withIAPContext';\n\ntype IAP_STATUS = {\n  connected: boolean;\n  products: Product[];\n  promotedProductsIOS: Product[];\n  subscriptions: Subscription[];\n  purchaseHistories: Purchase[];\n  availablePurchases: Purchase[];\n  currentPurchase?: Purchase;\n  currentPurchaseError?: PurchaseError;\n  initConnectionError?: Error;\n  finishTransaction: (\n    purchase: Purchase,\n    isConsumable?: boolean,\n    developerPayloadAndroid?: string,\n  ) => Promise<string | void>;\n  getAvailablePurchases: () => Promise<void>;\n  getPurchaseHistories: () => Promise<void>;\n  getProducts: (skus: string[]) => Promise<void>;\n  getSubscriptions: (skus: string[]) => Promise<void>;\n  requestPurchase: typeof iapRequestPurchase;\n  requestSubscription: typeof iapRequestSubscription;\n};\n\nexport function useIAP(): IAP_STATUS {\n  const {\n    connected,\n    products,\n    promotedProductsIOS,\n    subscriptions,\n    purchaseHistories,\n    availablePurchases,\n    currentPurchase,\n    currentPurchaseError,\n    initConnectionError,\n    setProducts,\n    setSubscriptions,\n    setAvailablePurchases,\n    setPurchaseHistories,\n    setCurrentPurchase,\n    setCurrentPurchaseError,\n  } = useIAPContext();\n\n  const getProducts = useCallback(\n    async (skus: string[]): Promise<void> => {\n      setProducts(await iapGetProducts(skus));\n    },\n    [setProducts],\n  );\n\n  const getSubscriptions = useCallback(\n    async (skus: string[]): Promise<void> => {\n      setSubscriptions(await iapGetSubscriptions(skus));\n    },\n    [setSubscriptions],\n  );\n\n  const getAvailablePurchases = useCallback(async (): Promise<void> => {\n    setAvailablePurchases(await iapGetAvailablePurchases());\n  }, [setAvailablePurchases]);\n\n  const getPurchaseHistories = useCallback(async (): Promise<void> => {\n    setPurchaseHistories(await getPurchaseHistory());\n  }, [setPurchaseHistories]);\n\n  const finishTransaction = useCallback(\n    async (\n      purchase: Purchase,\n      isConsumable?: boolean,\n      developerPayloadAndroid?: string,\n    ): Promise<string | void> => {\n      try {\n        return await iapFinishTransaction(\n          purchase,\n          isConsumable,\n          developerPayloadAndroid,\n        );\n      } catch (err) {\n        throw err;\n      } finally {\n        if (purchase.productId === currentPurchase?.productId) {\n          setCurrentPurchase(undefined);\n        }\n\n        if (purchase.productId === currentPurchaseError?.productId) {\n          setCurrentPurchaseError(undefined);\n        }\n      }\n    },\n    [\n      currentPurchase?.productId,\n      currentPurchaseError?.productId,\n      setCurrentPurchase,\n      setCurrentPurchaseError,\n    ],\n  );\n\n  return {\n    connected,\n    products,\n    promotedProductsIOS,\n    subscriptions,\n    purchaseHistories,\n    availablePurchases,\n    currentPurchase,\n    currentPurchaseError,\n    initConnectionError,\n    finishTransaction,\n    getProducts,\n    getSubscriptions,\n    getAvailablePurchases,\n    getPurchaseHistories,\n    requestPurchase: iapRequestPurchase,\n    requestSubscription: iapRequestSubscription,\n  };\n}\n"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AAEA,SACEC,iBAAiB,IAAIC,oBADvB,EAEEC,qBAAqB,IAAIC,wBAF3B,EAGEC,WAAW,IAAIC,cAHjB,EAIEC,kBAJF,EAKEC,gBAAgB,IAAIC,mBALtB,EAMEC,eAAe,IAAIC,kBANrB,EAOEC,mBAAmB,IAAIC,sBAPzB,QAQO,QARP;AAWA,SAAQC,aAAR,QAA4B,kBAA5B;AAyBA,OAAO,SAASC,MAAT,GAA8B;EACnC,MAAM;IACJC,SADI;IAEJC,QAFI;IAGJC,mBAHI;IAIJC,aAJI;IAKJC,iBALI;IAMJC,kBANI;IAOJC,eAPI;IAQJC,oBARI;IASJC,mBATI;IAUJC,WAVI;IAWJC,gBAXI;IAYJC,qBAZI;IAaJC,oBAbI;IAcJC,kBAdI;IAeJC;EAfI,IAgBFhB,aAAa,EAhBjB;EAkBA,MAAMT,WAAW,GAAGL,WAAW,CAC7B,MAAO+B,IAAP,IAAyC;IACvCN,WAAW,CAAC,MAAMnB,cAAc,CAACyB,IAAD,CAArB,CAAX;EACD,CAH4B,EAI7B,CAACN,WAAD,CAJ6B,CAA/B;EAOA,MAAMjB,gBAAgB,GAAGR,WAAW,CAClC,MAAO+B,IAAP,IAAyC;IACvCL,gBAAgB,CAAC,MAAMjB,mBAAmB,CAACsB,IAAD,CAA1B,CAAhB;EACD,CAHiC,EAIlC,CAACL,gBAAD,CAJkC,CAApC;EAOA,MAAMvB,qBAAqB,GAAGH,WAAW,CAAC,YAA2B;IACnE2B,qBAAqB,CAAC,MAAMvB,wBAAwB,EAA/B,CAArB;EACD,CAFwC,EAEtC,CAACuB,qBAAD,CAFsC,CAAzC;EAIA,MAAMK,oBAAoB,GAAGhC,WAAW,CAAC,YAA2B;IAClE4B,oBAAoB,CAAC,MAAMrB,kBAAkB,EAAzB,CAApB;EACD,CAFuC,EAErC,CAACqB,oBAAD,CAFqC,CAAxC;EAIA,MAAM3B,iBAAiB,GAAGD,WAAW,CACnC,OACEiC,QADF,EAEEC,YAFF,EAGEC,uBAHF,KAI6B;IAC3B,IAAI;MACF,OAAO,MAAMjC,oBAAoB,CAC/B+B,QAD+B,EAE/BC,YAF+B,EAG/BC,uBAH+B,CAAjC;IAKD,CAND,CAME,OAAOC,GAAP,EAAY;MACZ,MAAMA,GAAN;IACD,CARD,SAQU;MACR,IAAIH,QAAQ,CAACI,SAAT,MAAuBf,eAAvB,aAAuBA,eAAvB,uBAAuBA,eAAe,CAAEe,SAAxC,CAAJ,EAAuD;QACrDR,kBAAkB,CAACS,SAAD,CAAlB;MACD;;MAED,IAAIL,QAAQ,CAACI,SAAT,MAAuBd,oBAAvB,aAAuBA,oBAAvB,uBAAuBA,oBAAoB,CAAEc,SAA7C,CAAJ,EAA4D;QAC1DP,uBAAuB,CAACQ,SAAD,CAAvB;MACD;IACF;EACF,CAvBkC,EAwBnC,CACEhB,eADF,aACEA,eADF,uBACEA,eAAe,CAAEe,SADnB,EAEEd,oBAFF,aAEEA,oBAFF,uBAEEA,oBAAoB,CAAEc,SAFxB,EAGER,kBAHF,EAIEC,uBAJF,CAxBmC,CAArC;EAgCA,OAAO;IACLd,SADK;IAELC,QAFK;IAGLC,mBAHK;IAILC,aAJK;IAKLC,iBALK;IAMLC,kBANK;IAOLC,eAPK;IAQLC,oBARK;IASLC,mBATK;IAULvB,iBAVK;IAWLI,WAXK;IAYLG,gBAZK;IAaLL,qBAbK;IAcL6B,oBAdK;IAeLtB,eAAe,EAAEC,kBAfZ;IAgBLC,mBAAmB,EAAEC;EAhBhB,CAAP;AAkBD"}